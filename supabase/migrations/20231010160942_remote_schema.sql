-- 设置数据库会话参数
SET statement_timeout = 0;                           -- 语句执行超时时间，0表示无限制
SET lock_timeout = 0;                                -- 锁等待超时时间，0表示无限制
SET idle_in_transaction_session_timeout = 0;         -- 空闲事务会话超时时间
SET client_encoding = 'UTF8';                        -- 客户端字符编码设置为UTF8
SET standard_conforming_strings = on;                -- 启用标准字符串处理
SELECT pg_catalog.set_config('search_path', '', false); -- 设置搜索路径
SET check_function_bodies = false;                   -- 不检查函数体语法
SET xmloption = content;                             -- XML处理选项
SET client_min_messages = warning;                   -- 客户端最小消息级别为警告
SET row_security = off;                              -- 暂时关闭行级安全性

-- 启用必要的PostgreSQL扩展
CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";  -- 加密扩展
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";  -- GraphQL支持
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";  -- SQL语句统计
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";  -- 加密函数
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";  -- JWT支持
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";  -- Supabase密钥管理
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";  -- UUID生成

-- 设置表空间和访问方法
SET default_tablespace = '';  -- 使用默认表空间
SET default_table_access_method = "heap";  -- 使用堆存储

-- 创建积分表：用于跟踪用户积分
CREATE TABLE IF NOT EXISTS "public"."credits" (
    "id" bigint NOT NULL,  -- 主键ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间，默认为当前时间
    "credits" integer DEFAULT 0 NOT NULL,  -- 积分数量，默认为0
    "user_id" "uuid" NOT NULL  -- 用户ID，外键关联到auth.users表
);

ALTER TABLE "public"."credits" OWNER TO "postgres";  -- 设置表所有者为postgres

-- 设置ID列为自增列
ALTER TABLE "public"."credits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."credits_id_seq"  -- 序列名称
    START WITH 1  -- 从1开始
    INCREMENT BY 1  -- 每次增加1
    NO MINVALUE  -- 无最小值限制
    NO MAXVALUE  -- 无最大值限制
    CACHE 1  -- 缓存1个值
);

-- 创建图像表：存储模型生成的图像
CREATE TABLE IF NOT EXISTS "public"."images" (
    "id" bigint NOT NULL,  -- 主键ID
    "modelId" bigint NOT NULL,  -- 关联的模型ID
    "uri" "text" NOT NULL,  -- 图像URI/URL
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL  -- 创建时间
);

ALTER TABLE "public"."images" OWNER TO "postgres";  -- 设置表所有者

-- 设置ID列为自增列
ALTER TABLE "public"."images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 创建模型表：存储用户创建的AI模型
CREATE TABLE IF NOT EXISTS "public"."models" (
    "id" bigint NOT NULL,  -- 主键ID
    "name" "text",  -- 模型名称
    "type" "text",  -- 模型类型
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间
    "user_id" "uuid",  -- 创建者ID
    "status" "text" DEFAULT 'processing'::"text" NOT NULL,  -- 模型状态，默认为"processing"
    "modelId" "text"  -- 外部模型ID引用
);

ALTER TABLE "public"."models" OWNER TO "postgres";  -- 设置表所有者

-- 设置ID列为自增列
ALTER TABLE "public"."models" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."models_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 创建样本表：存储用于训练模型的样本
CREATE TABLE IF NOT EXISTS "public"."samples" (
    "id" bigint NOT NULL,  -- 主键ID
    "uri" "text" NOT NULL,  -- 样本URI/URL
    "modelId" bigint NOT NULL,  -- 关联的模型ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL  -- 创建时间
);

ALTER TABLE "public"."samples" OWNER TO "postgres";  -- 设置表所有者

-- 设置ID列为自增列
ALTER TABLE "public"."samples" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."samples_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 添加主键约束
ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_pkey" PRIMARY KEY ("id");  -- 设置credits表主键

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_pkey" PRIMARY KEY ("id");  -- 设置images表主键

ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_pkey" PRIMARY KEY ("id");  -- 设置models表主键

ALTER TABLE ONLY "public"."samples"
    ADD CONSTRAINT "samples_pkey" PRIMARY KEY ("id");  -- 设置samples表主键

-- 添加外键约束，建立表之间的关系
ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");  -- 积分表关联到用户

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_modelId_fkey" FOREIGN KEY ("modelId") REFERENCES "public"."models"("id") ON DELETE CASCADE;  -- 图像关联到模型，级联删除

ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;  -- 模型关联到用户，级联删除

ALTER TABLE ONLY "public"."samples"
    ADD CONSTRAINT "samples_modelId_fkey" FOREIGN KEY ("modelId") REFERENCES "public"."models"("id") ON DELETE CASCADE;  -- 样本关联到模型，级联删除

-- 行级安全策略（RLS）：精细控制数据访问权限

-- 积分表策略
CREATE POLICY "Enable insert for authenticated users only" ON "public"."credits" 
    FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));  -- 只允许已认证用户插入自己的积分记录

-- 样本表策略
CREATE POLICY "Enable insert for authenticated users only" ON "public"."samples" 
    FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = ( 
        SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "samples"."modelId")
    )));  -- 只允许已认证用户为自己的模型添加样本

-- 服务角色策略（后端服务使用）
CREATE POLICY "Enable insert for service role" ON "public"."credits" 
    FOR INSERT TO "service_role" WITH CHECK (true);  -- 允许服务角色插入任何积分记录

CREATE POLICY "Enable insert for service role" ON "public"."images" 
    FOR INSERT TO "service_role" WITH CHECK (true);  -- 允许服务角色插入任何图像

-- 模型表插入策略
CREATE POLICY "Enable insert for signed in users" ON "public"."models" 
    FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));  -- 只允许已登录用户创建自己的模型

-- 图像表读取策略
CREATE POLICY "Enable read access for all authenticated users" ON "public"."images" 
    FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( 
        SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "images"."modelId")
    )));  -- 只允许已认证用户查看自己模型的图像

-- 其他表的读取策略
CREATE POLICY "Enable read access for authenticated users" ON "public"."credits" 
    FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));  -- 只允许用户查看自己的积分

CREATE POLICY "Enable read access for authenticated users" ON "public"."models" 
    FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));  -- 只允许用户查看自己的模型

CREATE POLICY "Enable read access for authenticated users" ON "public"."samples" 
    FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( 
        SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "samples"."modelId")
    )));  -- 只允许用户查看自己模型的样本

-- 服务角色读取策略
CREATE POLICY "Enable read access for service role" ON "public"."credits" 
    FOR SELECT TO "service_role" USING (true);  -- 允许服务角色读取所有积分记录

-- 更新策略
CREATE POLICY "Enable update for authenticated users" ON "public"."credits" 
    FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) 
    WITH CHECK (("auth"."uid"() = "user_id"));  -- 只允许用户更新自己的积分

CREATE POLICY "Enable update for service role" ON "public"."credits" 
    FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);  -- 允许服务角色更新任何积分记录

CREATE POLICY "Enable update from service role" ON "public"."models" 
    FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);  -- 允许服务角色更新任何模型

CREATE POLICY "Enable updates for authenticated users to samples" ON "public"."samples" 
    FOR UPDATE TO "authenticated" WITH CHECK (("auth"."uid"() = ( 
        SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "samples"."modelId")
    )));  -- 只允许用户更新自己模型的样本

-- 删除策略
CREATE POLICY "Enable delete for authenticated users" ON "public"."models" 
    FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));  -- 只允许用户删除自己的模型

-- 启用行级安全
ALTER TABLE "public"."credits" ENABLE ROW LEVEL SECURITY;  -- 为积分表启用RLS
ALTER TABLE "public"."images" ENABLE ROW LEVEL SECURITY;   -- 为图像表启用RLS
ALTER TABLE "public"."models" ENABLE ROW LEVEL SECURITY;   -- 为模型表启用RLS
ALTER TABLE "public"."samples" ENABLE ROW LEVEL SECURITY;  -- 为样本表启用RLS

-- 授予模式使用权限
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";  -- 匿名用户
GRANT USAGE ON SCHEMA "public" TO "authenticated";  -- 已认证用户
GRANT USAGE ON SCHEMA "public" TO "service_role";  -- 服务角色

-- 授予表权限
-- 为积分表授予所有权限
GRANT ALL ON TABLE "public"."credits" TO "anon";
GRANT ALL ON TABLE "public"."credits" TO "authenticated";
GRANT ALL ON TABLE "public"."credits" TO "service_role";

-- 为积分表序列授予所有权限
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."credits_id_seq" TO "service_role";

-- 为图像表授予所有权限
GRANT ALL ON TABLE "public"."images" TO "anon";
GRANT ALL ON TABLE "public"."images" TO "authenticated";
GRANT ALL ON TABLE "public"."images" TO "service_role";

-- 为图像表序列授予所有权限
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."images_id_seq" TO "service_role";

-- 为模型表授予所有权限
GRANT ALL ON TABLE "public"."models" TO "anon";
GRANT ALL ON TABLE "public"."models" TO "authenticated";
GRANT ALL ON TABLE "public"."models" TO "service_role";

-- 为模型表序列授予所有权限
GRANT ALL ON SEQUENCE "public"."models_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."models_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."models_id_seq" TO "service_role";

-- 为样本表授予所有权限
GRANT ALL ON TABLE "public"."samples" TO "anon";
GRANT ALL ON TABLE "public"."samples" TO "authenticated";
GRANT ALL ON TABLE "public"."samples" TO "service_role";

-- 为样本表序列授予所有权限
GRANT ALL ON SEQUENCE "public"."samples_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."samples_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."samples_id_seq" TO "service_role";

-- 设置默认权限：为将来创建的对象预先设置权限
-- 为序列设置默认权限
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";

-- 为函数设置默认权限
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";

-- 为表设置默认权限
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";

-- 重置所有会话参数到默认值
RESET ALL;